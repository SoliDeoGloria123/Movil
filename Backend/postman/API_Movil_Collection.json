{
	"info": {
		"_postman_id": "e5f8c1a0-1234-5678-9abc-def012345678",
		"name": "API M√≥vil - Gesti√≥n de ProductosV2",
		"description": "Colecci√≥n completa para probar la API de gesti√≥n de productos con autenticaci√≥n autom√°tica",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script para verificar y renovar token autom√°ticamente",
					"const moment = require('moment');",
					"",
					"// Verificar si el token existe y no ha expirado",
					"const tokenExpiry = pm.environment.get('tokenExpiry');",
					"const currentTime = moment().unix();",
					"",
					"if (!pm.environment.get('authToken') || !tokenExpiry || currentTime > tokenExpiry) {",
					"    console.log('Token expirado o no existe, necesita autenticaci√≥n manual');",
					"    ",
					"    // Limpiar variables de token expirado",
					"    pm.environment.unset('authToken');",
					"    pm.environment.unset('tokenExpiry');",
					"    pm.environment.unset('userInfo');",
					"    ",
					"    // Solo mostrar mensaje si no es la request de login",
					"    if (pm.info.requestName !== 'Login') {",
					"        console.log('‚ö†Ô∏è Ejecute primero la request de Login para obtener un token v√°lido');",
					"    }",
					"} else {",
					"    const timeLeft = tokenExpiry - currentTime;",
					"    const hoursLeft = Math.floor(timeLeft / 3600);",
					"    console.log(`‚úÖ Token v√°lido por ${hoursLeft} horas m√°s`);",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:5000",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "Servidor",
			"item": [
				{
					"name": "Health Check - Ra√≠z",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								""
							]
						},
						"description": "Verificar que el servidor est√© funcionando"
					}
				},
				{
					"name": "API Info",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api"
							]
						},
						"description": "Obtener informaci√≥n sobre la API"
					}
				},
				{
					"name": "Health Check - API",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"health"
							]
						},
						"description": "Verificar el estado de la API"
					}
				}
			]
		},
		{
			"name": "Autenticaci√≥n",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const moment = require('moment');",
									"",
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has token', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.expect(jsonData).to.have.property('user');",
									"});",
									"",
									"// Guardar token y informaci√≥n del usuario",
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    ",
									"    // Guardar token",
									"    pm.environment.set('authToken', jsonData.token);",
									"    ",
									"    // Calcular expiraci√≥n (24 horas desde ahora)",
									"    const expiryTime = moment().add(24, 'hours').unix();",
									"    pm.environment.set('tokenExpiry', expiryTime);",
									"    ",
									"    // Guardar informaci√≥n del usuario",
									"    pm.environment.set('userInfo', JSON.stringify(jsonData.user));",
									"    pm.environment.set('userId', jsonData.user._id);",
									"    pm.environment.set('userRole', jsonData.user.role);",
									"    ",
									"    console.log('‚úÖ Token guardado exitosamente');",
									"    console.log('üîê Token expira en 24 horas');",
									"    console.log('üë§ Usuario logueado:', jsonData.user.username);",
									"    console.log('üé≠ Rol:', jsonData.user.role);",
									"}"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"admin\",\n    \"password\": \"123456\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Iniciar sesi√≥n y obtener token JWT"
					}
				},
				{
					"name": "Verificar Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Token is valid', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/auth/verify-token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"verify-token"
							]
						},
						"description": "Verificar si el token actual es v√°lido"
					}
				},
				{
					"name": "Obtener Mi Perfil",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('username');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"me"
							]
						},
						"description": "Obtener informaci√≥n del usuario autenticado"
					}
				},
				{
					"name": "Cambiar Contrase√±a",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Password changed successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentPassword\": \"123456\",\n    \"newPassword\": \"nuevaPassword123\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/change-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"change-password"
							]
						},
						"description": "Cambiar la contrase√±a del usuario autenticado"
					}
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Limpiar variables de entorno al hacer logout",
									"if (pm.response.code === 200) {",
									"    pm.environment.unset('authToken');",
									"    pm.environment.unset('tokenExpiry');",
									"    pm.environment.unset('userInfo');",
									"    pm.environment.unset('userId');",
									"    pm.environment.unset('userRole');",
									"    ",
									"    console.log('‚úÖ Logout exitoso - Variables limpiadas');",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/auth/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						},
						"description": "Cerrar sesi√≥n del usuario"
					}
				}
			]
		},
		{
			"name": "Usuarios",
			"item": [
				{
					"name": "Listar Usuarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has users array', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('users');",
									"    pm.expect(jsonData.users).to.be.an('array');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Obtener lista de todos los usuarios (solo admin)"
					}
				},
				{
					"name": "Crear Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('User created successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('_id');",
									"    ",
									"    // Guardar ID del usuario creado para pruebas posteriores",
									"    pm.environment.set('testUserId', jsonData.user._id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"coordinador1\",\n    \"email\": \"coordinador1@example.com\",\n    \"password\": \"123456\",\n    \"lastName\": \"Garc√≠a\",\n    \"role\": \"coordinador\",\n    \"phone\": \"1234567890\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Crear un nuevo usuario (solo admin)"
					}
				},
				{
					"name": "Obtener Usuario por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has user data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						},
						"description": "Obtener usuario espec√≠fico por ID"
					}
				},
				{
					"name": "Actualizar Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('User updated successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"lastName\": \"Garc√≠a Actualizado\",\n    \"phone\": \"0987654321\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users/{{testUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{testUserId}}"
							]
						},
						"description": "Actualizar informaci√≥n de un usuario"
					}
				},
				{
					"name": "Estad√≠sticas de Usuarios",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has stats', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('stats');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/stats",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"stats"
							]
						},
						"description": "Obtener estad√≠sticas de usuarios (solo admin)"
					}
				},
				{
					"name": "Alternar Estado Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('User status toggled', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{testUserId}}/toggle-status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{testUserId}}",
								"toggle-status"
							]
						},
						"description": "Activar/desactivar un usuario (solo admin)"
					}
				},
				{
					"name": "üóëÔ∏è Eliminar Usuario",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Usuario eliminado correctamente', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/users/{{testUserId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"users",
								"{{testUserId}}"
							]
						},
						"description": "Eliminar un usuario (solo admin). ‚ö†Ô∏è CUIDADO: Esta acci√≥n es irreversible."
					}
				}
			]
		},
		{
			"name": "Categor√≠as",
			"item": [
				{
					"name": "Listar Categor√≠as Activas (P√∫blico)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has categories', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('categories');",
									"    pm.expect(jsonData.categories).to.be.an('array');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories/active",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"active"
							]
						},
						"description": "Obtener categor√≠as activas (acceso p√∫blico)"
					}
				},
				{
					"name": "Listar Todas las Categor√≠as",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has categories', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('categories');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories"
							]
						},
						"description": "Obtener todas las categor√≠as (requiere autenticaci√≥n)"
					}
				},
				{
					"name": "Crear Categor√≠a",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Category created successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('category');",
									"    pm.expect(jsonData.category).to.have.property('_id');",
									"    ",
									"    // Guardar ID de la categor√≠a creada",
									"    pm.environment.set('testCategoryId', jsonData.category._id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Electr√≥nicos\",\n    \"description\": \"Dispositivos y aparatos electr√≥nicos\",\n    \"icon\": \"üì±\",\n    \"color\": \"#007bff\",\n    \"sortOrder\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories"
							]
						},
						"description": "Crear una nueva categor√≠a"
					}
				},
				{
					"name": "Obtener Categor√≠a por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has category data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('category');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories/{{testCategoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"{{testCategoryId}}"
							]
						},
						"description": "Obtener categor√≠a espec√≠fica por ID"
					}
				},
				{
					"name": "Actualizar Categor√≠a",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Category updated successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('category');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Electr√≥nicos Actualizados\",\n    \"description\": \"Dispositivos y aparatos electr√≥nicos modernos\",\n    \"color\": \"#28a745\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/categories/{{testCategoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"{{testCategoryId}}"
							]
						},
						"description": "Actualizar una categor√≠a existente"
					}
				},
				{
					"name": "Estad√≠sticas de Categor√≠as",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has stats', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('stats');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories/stats",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"stats"
							]
						},
						"description": "Obtener estad√≠sticas de categor√≠as"
					}
				},
				{
					"name": "Alternar Estado Categor√≠a",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Category status toggled', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('category');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories/{{testCategoryId}}/toggle-status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"{{testCategoryId}}",
								"toggle-status"
							]
						},
						"description": "Activar/desactivar una categor√≠a"
					}
				},
				{
					"name": "Reordenar Categor√≠as",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Categories reordered successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData.success).to.be.true;",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categories\": [\n        {\n            \"_id\": \"{{testCategoryId}}\",\n            \"sortOrder\": 1\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/categories/reorder",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"reorder"
							]
						},
						"description": "Reordenar categor√≠as"
					}
				},
				{
					"name": "üóëÔ∏è Eliminar Categor√≠a",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Categor√≠a eliminada correctamente', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/categories/{{testCategoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"categories",
								"{{testCategoryId}}"
							]
						},
						"description": "Eliminar una categor√≠a (solo admin). ‚ö†Ô∏è CUIDADO: Verificar que no tenga subcategor√≠as o productos asociados."
					}
				}
			]
		},
		{
			"name": "Subcategor√≠as",
			"item": [
				{
					"name": "Listar Subcategor√≠as Activas (P√∫blico)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has subcategories', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('subcategories');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/subcategories/active",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"subcategories",
								"active"
							]
						},
						"description": "Obtener subcategor√≠as activas (acceso p√∫blico)"
					}
				},
				{
					"name": "Listar Todas las Subcategor√≠as",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has subcategories', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('subcategories');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/subcategories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"subcategories"
							]
						},
						"description": "Obtener todas las subcategor√≠as"
					}
				},
				{
					"name": "Crear Subcategor√≠a",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Subcategory created successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('subcategory');",
									"    pm.expect(jsonData.subcategory).to.have.property('_id');",
									"    ",
									"    // Guardar ID de la subcategor√≠a creada",
									"    pm.environment.set('testSubcategoryId', jsonData.subcategory._id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Smartphones\",\n    \"description\": \"Tel√©fonos inteligentes y accesorios\",\n    \"category\": \"{{testCategoryId}}\",\n    \"sortOrder\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/subcategories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"subcategories"
							]
						},
						"description": "Crear una nueva subcategor√≠a"
					}
				},
				{
					"name": "Obtener Subcategor√≠a por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has subcategory data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('subcategory');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/subcategories/{{testSubcategoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"subcategories",
								"{{testSubcategoryId}}"
							]
						},
						"description": "Obtener subcategor√≠a espec√≠fica por ID"
					}
				},
				{
					"name": "Actualizar Subcategor√≠a",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Subcategory updated successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('subcategory');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Smartphones Premium\",\n    \"description\": \"Tel√©fonos inteligentes de gama alta y accesorios premium\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/subcategories/{{testSubcategoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"subcategories",
								"{{testSubcategoryId}}"
							]
						},
						"description": "Actualizar una subcategor√≠a existente"
					}
				},
				{
					"name": "Subcategor√≠as por Categor√≠a",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has subcategories', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('subcategories');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/subcategories/category/{{testCategoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"subcategories",
								"category",
								"{{testCategoryId}}"
							]
						},
						"description": "Obtener subcategor√≠as de una categor√≠a espec√≠fica"
					}
				},
				{
					"name": "üóëÔ∏è Eliminar Subcategor√≠a",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Subcategor√≠a eliminada correctamente', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/subcategories/{{testSubcategoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"subcategories",
								"{{testSubcategoryId}}"
							]
						},
						"description": "Eliminar una subcategor√≠a (solo admin). ‚ö†Ô∏è CUIDADO: Verificar que no tenga productos asociados."
					}
				}
			]
		},
		{
			"name": "Productos",
			"item": [
				{
					"name": "Listar Productos Activos (P√∫blico)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has products', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('products');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/active",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"active"
							]
						},
						"description": "Obtener productos activos (acceso p√∫blico)"
					}
				},
				{
					"name": "Listar Todos los Productos",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has products', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('products');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						},
						"description": "Obtener todos los productos"
					}
				},
				{
					"name": "Crear Producto",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 201', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test('Product created successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('product');",
									"    pm.expect(jsonData.product).to.have.property('_id');",
									"    ",
									"    // Guardar ID del producto creado",
									"    pm.environment.set('testProductId', jsonData.product._id);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"iPhone 15 Pro\",\n    \"description\": \"El √∫ltimo smartphone de Apple con chip A17 Pro\",\n    \"shortDescription\": \"iPhone 15 Pro - 128GB\",\n    \"sku\": \"IPH15PRO128\",\n    \"category\": \"{{testCategoryId}}\",\n    \"subcategory\": \"{{testSubcategoryId}}\",\n    \"price\": 999.99,\n    \"comparePrice\": 1099.99,\n    \"cost\": 750.00,\n    \"stock\": {\n        \"quantity\": 50,\n        \"minStock\": 5,\n        \"trackStock\": true\n    },\n    \"dimensions\": {\n        \"weight\": 0.187,\n        \"length\": 14.67,\n        \"width\": 7.09,\n        \"height\": 0.83\n    },\n    \"images\": [\n        {\n            \"url\": \"https://example.com/iphone15pro.jpg\",\n            \"alt\": \"iPhone 15 Pro imagen principal\",\n            \"isPrimary\": true\n        }\n    ],\n    \"tags\": [\"smartphone\", \"apple\", \"premium\", \"5g\"],\n    \"isFeatured\": true,\n    \"seoDescription\": \"iPhone 15 Pro con chip A17 Pro, c√°mara profesional y dise√±o en titanio\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/products",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products"
							]
						},
						"description": "Crear un nuevo producto"
					}
				},
				{
					"name": "Obtener Producto por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has product data', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('product');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/{{testProductId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"{{testProductId}}"
							]
						},
						"description": "Obtener producto espec√≠fico por ID"
					}
				},
				{
					"name": "Actualizar Producto",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Product updated successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('product');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"iPhone 15 Pro Max\",\n    \"description\": \"El iPhone m√°s grande con chip A17 Pro y c√°mara avanzada\",\n    \"price\": 1199.99\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/products/{{testProductId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"{{testProductId}}"
							]
						},
						"description": "Actualizar un producto existente"
					}
				},
				{
					"name": "Productos Destacados",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has featured products', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('products');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/featured",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"featured"
							]
						},
						"description": "Obtener productos destacados"
					}
				},
				{
					"name": "Productos por Categor√≠a",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has products', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('products');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/category/{{testCategoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"category",
								"{{testCategoryId}}"
							]
						},
						"description": "Obtener productos de una categor√≠a espec√≠fica"
					}
				},
				{
					"name": "Productos por Subcategor√≠a",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has products', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('products');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/subcategory/{{testSubcategoryId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"subcategory",
								"{{testSubcategoryId}}"
							]
						},
						"description": "Obtener productos de una subcategor√≠a espec√≠fica"
					}
				},
				{
					"name": "B√∫squeda de Productos",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has search results', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('products');",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/search?q=iPhone&page=1&limit=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "iPhone"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Buscar productos por texto"
					}
				},
				{
					"name": "üì¶ Actualizar Stock de Producto",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Stock actualizado correctamente', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('product');",
									"    pm.expect(jsonData.product).to.have.property('stock');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 25,\n    \"minStock\": 5,\n    \"trackStock\": true,\n    \"reason\": \"Actualizaci√≥n de inventario\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/products/{{testProductId}}/stock",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"{{testProductId}}",
								"stock"
							]
						},
						"description": "Actualizar el stock de un producto (admin o coordinador)"
					}
				},
				{
					"name": "üóëÔ∏è Eliminar Producto",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Producto eliminado correctamente', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', true);",
									"    pm.expect(jsonData).to.have.property('message');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/products/{{testProductId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"products",
								"{{testProductId}}"
							]
						},
						"description": "Eliminar un producto (solo admin). ‚ö†Ô∏è CUIDADO: Esta acci√≥n es irreversible."
					}
				}
			]
		}
	]
}
